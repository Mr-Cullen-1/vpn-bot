from aiogram import Dispatcher
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from keyboards.main_menu import get_main_menu
from payment_methods import payment_card, payment_crypto, payment_stars
import logging

logging.basicConfig(level=logging.INFO)

TARIFFS = {
    "1_month": {"duration": "1 –º–µ—Å—è—Ü", "price": 199},
    "3_months": {"duration": "3 –º–µ—Å—è—Ü–∞", "price": 499},
    "6_months": {"duration": "6 –º–µ—Å—è—Ü–µ–≤", "price": 899},
    "1_year": {"duration": "12 –º–µ—Å—è—Ü–µ–≤", "price": 1399}
}

async def send_vpn_key(callback: CallbackQuery, db):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ VPN-–∫–ª—é—á–∞"""
    user_id = callback.from_user.id

    async with db.pool.acquire() as conn:
        vpn_key = await conn.fetchval("SELECT key FROM vpn_keys WHERE user_id = $1", user_id)

    if vpn_key:
        await callback.message.answer(f"–í–∞—à VPN –∫–ª—é—á:\n<code>{vpn_key}</code>", parse_mode="HTML")
    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN –∫–ª—é—á–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ.")

    await callback.answer()

def get_back_button(callback_data: str) -> InlineKeyboardButton:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"."""
    return InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=callback_data)

def register_menu_handlers(dp: Dispatcher, db, bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é"""

    @dp.callback_query(lambda c: c.data == "my_vpn_key")
    async def my_vpn_key_handler(callback: CallbackQuery):
        await send_vpn_key(callback, db)

    @dp.callback_query(lambda c: c.data == "instructions")
    async def instructions(callback: CallbackQuery):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[get_back_button("main_menu")]])
        await callback.message.edit_text(
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º VPN!\n"
            "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n"
            "- –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ\n"
            "- –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
            "- –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é.",
            reply_markup=keyboard
        )

    @dp.callback_query(lambda c: c.data == "main_menu")
    async def back_to_main_menu(callback: CallbackQuery):
        await callback.message.edit_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
            reply_markup=get_main_menu()
        )

    @dp.callback_query(lambda c: c.data == "view_tariffs")
    async def view_tariffs(callback: CallbackQuery):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 199‚ÇΩ", callback_data="tariff_1_month")],
            [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 499‚ÇΩ", callback_data="tariff_3_months")],
            [InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 899‚ÇΩ", callback_data="tariff_6_months")],
            [InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤ - 1399‚ÇΩ", callback_data="tariff_1_year")],
            [get_back_button("main_menu")]
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=keyboard)

    @dp.callback_query(lambda c: c.data.startswith("tariff_"))
    async def tariff_selection(callback: CallbackQuery):
        tariff_key = callback.data.replace("tariff_", "").strip()
        logging.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {tariff_key}")

        tariff = TARIFFS.get(tariff_key)
        if not tariff:
            await callback.message.edit_text(
                "–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[get_back_button("view_tariffs")]])
            )
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data=f"payment_card_{tariff_key}")],
            [InlineKeyboardButton(text="üí∞–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data=f"payment_crypto_{tariff_key}")],
            [InlineKeyboardButton(text="üåü–¢–µ–ª–µ–≥—Ä–∞–º–º —Å—Ç–∞—Ä—Å", callback_data=f"payment_stars_{tariff_key}")],
            [get_back_button("view_tariffs")]
        ])
        await callback.message.edit_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –Ω–∞ {tariff['duration']}.\n"
                 f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff['price']}‚ÇΩ.\n\n"
                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )

    @dp.callback_query(lambda c: c.data.startswith("payment_"))
    async def payment_selection(callback: CallbackQuery):
        payment_data = callback.data.split("_")
        payment_method = payment_data[1]
        tariff_key = "_".join(payment_data[2:]).strip()
        logging.info(f"–í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}, —Ç–∞—Ä–∏—Ñ: {tariff_key}")

        tariff = TARIFFS.get(tariff_key)
        if not tariff:
            await callback.message.edit_text("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ —Å–Ω–æ–≤–∞.")
            return

        if payment_method == "card":
            await payment_card.handle_payment(callback, tariff["price"], bot, db)
        elif payment_method == "crypto":
            await payment_crypto.handle_payment(callback, tariff_key, bot, db)
        elif payment_method == "stars":
            await payment_stars.handle_telegram_stars_payment(callback, tariff_key, bot, db)

    @dp.callback_query(lambda c: c.data == "referrals")
    async def handle_referrals(callback: CallbackQuery):
        user_id = callback.from_user.id
        referral_link = f"https://t.me/vpnprojbot?start={user_id}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        await callback.message.answer(
            f"–í–æ—Ç –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ–π —Å –¥—Ä—É–∑—å—è–º–∏!"
        )
        await callback.answer()